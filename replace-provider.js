const fs = require('fs');
const path = require('path');

// –ö–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –†–æ—Å—Ç–µ–ª–µ–∫–æ–º–∞ –Ω–∞ –ú–¢–°
const replacements = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  '–†–æ—Å—Ç–µ–ª–µ–∫–æ–º': '–ú–¢–°',
  'Rostelecom': 'MTS',
  '–†–¢–ö': '–ú–¢–°',
  'RTK': 'MTS',
  
  // –°–µ—Ä–≤–∏—Å—ã
  'Wink': '–ú–¢–° –¢–í',
  'wink': '–º—Ç—Å-—Ç–≤',
  
  // –î–æ–º–µ–Ω—ã
  'rostelecom-tariffs.ru': 'mts-tariffs.ru',
  'rtk-telecom.ru': 'mts-telecom.ru',
  'home-rtk.ru': 'home-mts.ru',
  'rt.ru': 'mts.ru',
  
  // –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã
  'partner@home-rtk.ru': 'partner@home-mts.ru',
  
  // –û–ø–∏—Å–∞–Ω–∏—è
  '–∫—Ä—É–ø–Ω–µ–π—à–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä': '–∫—Ä—É–ø–Ω–µ–π—à–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–∫–æ–º-–æ–ø–µ—Ä–∞—Ç–æ—Ä',
  '–ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª': '–ü–ê–û ¬´–ú–¢–°¬ª',
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  '–¥–æ 700 –ú–±–∏—Ç/—Å': '–¥–æ 1 –ì–±–∏—Ç/—Å',
  '–¥–æ 210 –∫–∞–Ω–∞–ª–æ–≤': '–¥–æ 200 –∫–∞–Ω–∞–ª–æ–≤',
  '25 000 —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤': '20 000 —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤',
  
  // –¶–µ–Ω—ã
  '642 —Ä—É–±/–º–µ—Å': '599 —Ä—É–±/–º–µ—Å',
  '1600 —Ä—É–±/–º–µ—Å': '1499 —Ä—É–±/–º–µ—Å',
  '800': '750',
  '700': '650',
  '150 ‚ÇΩ/–º–µ—Å': '120 ‚ÇΩ/–º–µ—Å',
  '100 ‚ÇΩ/–º–µ—Å': '80 ‚ÇΩ/–º–µ—Å',
  
  // –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
  '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –ú–∞–∫—Å–∏ 300': '–ú–¢–° –î–æ–º–∞—à–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç 300',
  '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –¢–µ—Å—Ç-–¥—Ä–∞–π–≤': '–ú–¢–° –î–æ–º–∞—à–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç 100',
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
  '–æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç Mail.ru': '–æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç –ú–¢–°',
  '8 –ì–ë –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞': '10 –ì–ë –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞',
  '–ø—Ä–æ–≥—Ä–∞–º–º—ã "–ë–æ–Ω—É—Å" –æ—Ç –†–æ—Å—Ç–µ–ª–µ–∫–æ–º': '–ø—Ä–æ–≥—Ä–∞–º–º—ã "–ë–æ–Ω—É—Å" –æ—Ç –ú–¢–°',
  '–æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç –†–æ—Å—Ç–µ–ª–µ–∫–æ–º–∞': '–æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç –ú–¢–°',
  '–£–º–Ω—ã–π –¥–æ–º –æ—Ç –†–æ—Å—Ç–µ–ª–µ–∫–æ–º–∞': '–£–º–Ω—ã–π –¥–æ–º –æ—Ç –ú–¢–°',
  
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞
  '—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ Rostelecom': '—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ú–¢–°',
  
  // –ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  '–¥–æ–≥–æ–≤–æ—Ä–∞ –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª': '–¥–æ–≥–æ–≤–æ—Ä–∞ –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –ü–ê–û ¬´–ú–¢–°¬ª',
  '—É—Å–ª—É–≥–∏ —Å–≤—è–∑–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª': '—É—Å–ª—É–≥–∏ —Å–≤—è–∑–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ü–ê–û ¬´–ú–¢–°¬ª',
  '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç rt.ru': '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç mts.ru',
  
  // –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
  'rostelecom-tariffs': 'mts-tariffs',
  
  // –®—Ä–∏—Ñ—Ç—ã
  'Rostelecom Basis': 'MTS Sans',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function walkDir(dir, callback) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ .git
      if (file !== 'node_modules' && file !== '.git' && !file.startsWith('.')) {
        walkDir(filePath, callback);
      }
    } else {
      callback(filePath);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
function processFile(filePath) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const ext = path.extname(filePath).toLowerCase();
    const textExtensions = ['.js', '.jsx', '.ts', '.tsx', '.json', '.md', '.txt', '.css', '.html'];
    
    if (!textExtensions.includes(ext)) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
    }
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    let content = fs.readFileSync(filePath, 'utf8');
    let originalContent = content;
    let hasChanges = false;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    for (const [oldText, newText] of Object.entries(replacements)) {
      if (content.includes(oldText)) {
        content = content.replace(new RegExp(oldText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), newText);
        hasChanges = true;
      }
    }
    
    // –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    if (hasChanges) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å –†–æ—Å—Ç–µ–ª–µ–∫–æ–º–∞ –Ω–∞ –ú–¢–°...\n');
  
  let processedFiles = 0;
  let updatedFiles = 0;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
  walkDir('.', (filePath) => {
    processedFiles++;
    const originalContent = fs.readFileSync(filePath, 'utf8');
    processFile(filePath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const newContent = fs.readFileSync(filePath, 'utf8');
    if (originalContent !== newContent) {
      updatedFiles++;
    }
  });
  
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}`);
  console.log(`- –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${updatedFiles}`);
  console.log(`\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 